import java.io.*;
import java.util.*;

public class project6
{
	public static ArrayList<airport> apList = new ArrayList<airport>();
	public static ArrayList<String> apList2 = new ArrayList<String>();

	public static void main(String[] args)
	{
		File apInput = new File("airports.txt");

		String[] apData;

		if(!apInput.exists())
		{
			System.out.println("The file doesn't exist");
			System.exit(0);
		}

		try
		{
			Scanner kb = new Scanner(apInput);

			while(kb.hasNext())
			{
				apData = kb.nextLine().split(" +");
				processData(apData);
			}

			kb.close();
		}
		catch(IOException e)
		{}

		getFlightPlan();
	}

	public static void processData(String[] data)
	{
		int i = 1;

		boolean exists = false;

		airport origin = new airport(data[0]);
		apList2.add(data[0]);

		apList.add(origin);

		while( i < data.length)
		{
			origin.addAdjAP(data[i++],Integer.parseInt(data[i++]));
		}
	}

	public static void getFlightPlan()
	{
		Scanner kb = new Scanner(System.in);
		String depAP = "", arrAP = "", repeat = "Y";

		do
		{
			System.out.print("\nEnter departure airport:\t");
			depAP = kb.next().toUpperCase();
			System.out.print("Enter arrival airport:  \t");
			arrAP = kb.next().toUpperCase();

			if(exists(depAP) && exists(arrAP))
			{
				dijkstra1(depAP);
				System.out.println("\nBy price:");
				printData(arrAP);

				dijkstra2(depAP);
				System.out.println("\n\nBy Connections:");
				printData(arrAP);

				System.out.print("\n\nCheck another route (Y/N)? ");

				repeat = kb.next().toUpperCase();
			}
			else
				System.out.println("\nYou entered an invalid airport.\nProgram will start again.\n");
		}
		while(repeat.equals("Y"));
	}

	public static void printData(String AP)
	{
		System.out.println("\tPrice:\t\t\t"+printCost(getAirport(AP)));
		System.out.println("\tConnections:\t" + (printConnections(getAirport(AP))-1));
		System.out.print("\tRoute:\t\t\t" );
		printPath(getAirport(AP));
	}

	public static void printPath(airport ap)
	{
		if(ap.getPath() != null)
		{
			printPath(ap.getPath());

			System.out.print(" -> ");
		}

		System.out.print(ap.getName());
	}

	public static int printCost(airport ap)
	{
		return ap.getCost();
	}

	public static int printConnections(airport ap)
	{
		return ap.getCX();
	}

	public static void dijkstra1(String name)
	{
		airport origin = getAirport(name);
		int index = 0;

		while(index < apList.size())
		{
			apList.get(index).setCost(Integer.MAX_VALUE);
			apList.get(index).setCX(Integer.MAX_VALUE);
			apList.get(index).setKnown(false);
			apList.get(index++).setPath(null);
		}

		origin.setCost(0);
		origin.setCX(0);

		for(int i = 0; i < apList.size(); i++)
		{
			airport lowestCost = getLowest();

			airport adjAP;

			if(lowestCost == null)
				break;

			lowestCost.setKnown(true);

			for(int j = 0; j < lowestCost.getAdjAP(); j++)
			{
				adjAP = getAirport(lowestCost.getAdjAP(j));

				int cvw = lowestCost.getAdjAPCost(j);

				if(!adjAP.getKnown())
					if((lowestCost.getCost() + cvw) < adjAP.getCost())
					{
						adjAP.setCost(lowestCost.getCost() + cvw);
						adjAP.setPath(lowestCost);
						adjAP.setCX(lowestCost.getCX() + 1);
					}
			}
		}
	}

	public static void dijkstra2(String name)
	{
		airport origin = getAirport(name);
		int index = 0;

		while(index < apList.size())
		{
			apList.get(index).setCost(Integer.MAX_VALUE);
			apList.get(index).setCX(Integer.MAX_VALUE);
			apList.get(index).setKnown(false);
			apList.get(index++).setPath(null);
		}

		origin.setCost(0);
		origin.setCX(0);

		for(int i = 0; i < apList.size(); i++)
		{
			airport lowestCost = getLowest();

			airport adjAP;

			if(lowestCost == null)
				break;

			lowestCost.setKnown(true);

			for(int j = 0; j < lowestCost.getAdjAP(); j++)
			{
				adjAP = getAirport(lowestCost.getAdjAP(j));

				int cvw = lowestCost.getAdjAPCost(j);

				if(!adjAP.getKnown())
					if((lowestCost.getCX() + 1) < adjAP.getCX())
					{
						adjAP.setCost(lowestCost.getCost() + cvw);
						adjAP.setPath(lowestCost);
						adjAP.setCX(lowestCost.getCX() + 1);
					}
			}
		}
	}

	public static airport getAirport(String name)
	{
		int index = 0;
		airport ap = null;

		while(index < apList.size())
		{
			if(name.equals(apList.get(index).getName()))
			{
				ap = apList.get(index);
				break;
			}

			index++;
		}

		return ap;
	}

	public static airport getLowest()
	{
		airport lowestCost = apList.get(0);
		airport ap;

		int index = 1;

		while(index < apList.size())
		{
			if(lowestCost.getKnown())
			{
				lowestCost = apList.get(index);
			}
			else if(!lowestCost.getKnown())
			{
				ap = apList.get(index);

				if(!ap.getKnown())
				{
					if(ap.getCost() < lowestCost.getCost())
					{
						lowestCost = ap;
					}
				}
			}
			else
				lowestCost = null;

			index++;
		}

		return lowestCost;
	}

	public static airport getClosest()
	{
		airport closestAP = apList.get(0);
		airport ap;

		int index = 1;

		while(index < apList.size())
		{
			if(closestAP.getKnown())
			{
				closestAP = apList.get(index);
			}
			else if(!closestAP.getKnown())
			{
				ap = apList.get(index);

				if(!ap.getKnown())
				{
					if(ap.getCX() < closestAP.getCX())
					{

						closestAP = ap;
					}
				}
			}
			else
				closestAP = null;

			index++;
		}

		return closestAP;
	}

	public static boolean exists(String name)
	{
		int i = 0;
		boolean exists = false;

		while(i < apList2.size())
		{
			String name2 = apList2.get(i);

			if(name.equals(name2))
			{
				exists = true;
				break;
			}

			i++;
		}

		return exists;
	}
}
